API integration testing:
----------------------------


signup users using username and password only:
Inputs:
API endpoint: /users/signup
request method: POST
request body: {username: "userTest", password: "meow1"}
outputs:
response body: {success: true, status: "Registeration Successful"}
response status code: 200


signup users using username, password and other fields:
inputs:
API endpoint: /users/signup
request method: POST
request body: {username: "userTest", password: "meow1", firstname: "Abdo", lastname: "hany", email: "xx@gmail.com", phoneNumber: "02341749375"}
outputs:
response body: {success: true, status: "Registeration Successful"}
response status code: 200


login users by username and password:
inputs:
request method: POST
API endpoint: /users/login
request body: {username: "userTest", password: "meow1"}
outputs:
response body: {success: true, token: <JWT of the user>}
response status code: 200


login users using facebook:
inputs:
API endpoint: /users/facebook/login?access_token= <facebook access token>
request method: GET
outputs:
response body: {success: true, token: <JWT of the user>}
response status code: 200


check the validity of a JWT:
inputs:
API endpoint: /users/checkJWT
request method: GET
Authorization header: ""bearer <request owner's JWT>""
outputs:
if the token is valid:
response body: {success: true, status: "JWT valid"}'
response status code: 200
if the token is not valid:
response body: {success: false, status: "JWT invalid"}'
response status code: 401


logout user:
inputs:
API endpoint: /users/logout
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
response status code: 200


user gets his/her profile:
inputs:
API endpoint: /users/profile
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
response body: {success: true, profile: <info that helps the UI to view the user's profile>}
response status code: 200

user can't view the profiles of other users:
inputs: 
API endpoint: /users/profile
request method: GET
outputs:
response body should contain property "success" and it should be false
response status code: 401


user modifies his/her profile info:
inputs:
API endpoint: /users/profile
request mdethod: PUT
Authorization header: "bearer <request owner's JWT>"
request body: {firstname: "mod", lastname: "mod", email: "mod", phoneNumber: "mod"}
outputs:
response body: {success: true, profile: <the profile of the user after update>}
response status code: 200


user update his/her profile pic:
inputs:
API endpoint: /users/profile/profilePic
request method: PUT
Authorization header: ""bearer <request owner's JWT>""
Content-Type header: "multipart/form-data"
ProfilePic: <the new profile pic>
outputs:
response body: {success: true, status: "Profile Pic Updated", image: <the link of the new profile pic>}
response status code: 200


user can't upload any files except images while uploading a profile pic:
inputs:
API endpoint: /users/profile/profilePic
request method: PUT
Authorization header: "bearer <request owner's JWT>"
Content-Type header: multipart/form-data
ProfilePic: <a non-picture file>
outputs:
response body: {success: false, status: "Upload Failed", err: "Unsupported Format"}
response status code: 401


user views the list of his/her subscribed libraries:
inputs:
API endpoint: /users/myLibraries
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
response body: {success: true, subscribedLibraries: <list of subscribed libraries for the request owner>}
response status code: 200


user can't view the list of the subscribed libraries of other users:
inputs:
API endpoint: /users/myLibraries
request method: GET
outputs:
response body should have the property "success" and it should be false
response status code: 401


user gets his/her favorites list:
inputs:
API endpoint: /users/favorites
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
response body should have the property success and it should be true
response status code: 200


user can't get the favorites list of other users:
inputs:
API endpoint: /users/favorites
request method: GET
outputs:
response body should have the property success and it should be false
response status code: 401


user adds a certain item to the favorites:
inputs:
API endpoint: /users/favorites
request method: POST
Authorization header: "bearer <request owner's JWT>"
request body: {_id: <id of the item>, library: <id of the library that the item belongs to>}
outputs:
response body should have the property success and it should be true
response status code: 200


user can't add a certain item to the favorites list of other users:
inputs:
API endpoint: /users/favorites
request method: POST
request body: {_id: <id of the item>, library: <id of the library that the item belongs to>}
outputs:
response body should have the property success and it should be false
response status code: 401


user deletes a certain item from his/her favorites list:
inputs:
API endpoint: /users/favorites
request method: PUT
Authorization header: "bearer <request owner's JWT>"
request body: {_id: <id of the item>, library: <id of the library that the item belongs to>}
outputs:
response body should have the property success and it should be true
response status code: 200


user can't delete a certain item to the favorites list of other users:
inputs:
API endpoint: /users/favorites
request method: PUT
request body: {_id: <id of the item>, library: <id of the library that the item belongs to>}
outputs:
response body should have the property success and it should be false
response status code: 401


user can't search for items if he/she submitted a space only:
inputs:
API endpoint: /search?filter=" "
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
response body should have the property success and it should be false
response status code: 404


user searhces for items by name:
inputs:
API endpoint: /search?filter=<name>&by="name"
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
response body: {success: true, items: <list of search results>}
response status code: 200


user searhces for items by genre:
inputs:
API endpoint: /search?filter=<genre>&by="genre"
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
response body: {success: true, items: <list of search results>}
response status code: 200


user searhces for items by type:
inputs:
API endpoint: /search?filter=<type>&by="type"
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
response body: {success: true, items: <list of search results>}
response status code: 200


user searhces for items by author:
inputs:
API endpoint: /search?filter=<author>&by="author"
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
response body: {success: true, items: <list of search results>}
response status code: 200


user searhces for items by language:
inputs:
API endpoint: /search?filter=<language>&by="language"
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
response body: {success: true, items: <list of search results>}
response status code: 200


user searhces for items by ISBN:
inputs:
API endpoint: /search?filter=<ISBN>&by="ISBN"
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
response body: {success: true, items: <list of search results>}
response status code: 200


librarian gets all registered users in the system:
inputs:
API endpoint: /stats/users
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
if the request owner is an librarian:
response body: {success: true, users: <list of all registered users in the system>}
response status code: 200
if the request owner is not a librarian:
response body should have the property "success" set to false and "status" set to "Access Denied"
response status code: 403


librarian gets statistical info about a certain library lib1, lib2 or lib3:
inputs:
API endpoint: /stats/libraries/<lib1 or lib2 or lib3>
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
if the request owner is an librarian:
response body: {success: true, num: <total number of the items in the library>, latest[1|2|3]: <array of the latest 5 items in the library>}
response status code: 200
if the request owner is not a librarian:
response body should have the property "success" set to false and "status" set to "Access Denied"
response status code: 403


user views all libraries of the system:
inputs:
API endpoint: /libraries
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
response body: {success: true, libraries: <list of all libraries>}
response status code: 200


user views information about a certain library:
inputs:
API endpoint: /libraries/<libraryId>/info
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
response body: {success: true, library: <info about the library>, librarian: <info about the librarian of the library>}
response status code: 200


librarian modifies the info of his/her library:
inputs:
API endpoint: /libraries/<libraryId>/info
request method: PUT
Authorization header: "bearer <request owner's JWT>"
outputs:
if the request owner is the librarian of the library:
response body: {success: true, library: <full info of the library after update>}
response status code: 200
if the request owner is NOT the librarian of the library:
response body: {success: false, status: "Access Denied", err: "You Are Not A Librarian In This Library"}
response status code: 403


librarian gets the list of all join requests to his/her library:
inputs:
API endpoint: /libraries/<libraryId>?option="requests"
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
if the request owner is the librarian of the library:
response body: {success: true, requests: <array of all join requests to the library>}
response status code: 200
if the request owner is NOT the librarian of the library:
response body: {success: false, status: "Access Denied", err: "You Are Not A Librarian In This Library"}
response status code: 403


librarian gets the list of all members in his/her library:
inputs:
API endpoint: /libraries/<libraryId>?option="members"
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
if the request owner is the librarian of the library:
response body: {success: true, members: <array of all members in the library>}
response status code: 200
if the request owner is NOT the librarian of the library:
response body: {success: false, status: "Access Denied", err: "You Are Not A Librarian In This Library"}
response status code: 403


user sends a join request to a library:
inputs:
API endpoint: /libraries/<libraryId>/requests
request method: POST
Authorization header: "bearer <request owner's JWT>"
outputs:
response body: {success: true, status: "Join Request Sent"}
response status code: 200


librarian accepts a join reuqest to his/her library:
inputs: 
API endpoint: /libraries/<libraryId>/<userId>?action="approve"
request method: PUT
Authorization header: "bearer <request owner's JWT>"
outputs:
if the request owner is the librarian of the library:
response body: {success: true, status: "Request Approved Successfuly"}
response status code: 200
if the request owner is NOT the librarian of the library:
response body: {success: false, status: "Access Denied", err: "You Are Not A Librarian In This Library"}
response status code: 403


user sends a feedback to a library he is a member at:
inputs:
API endpoint: /libraries/<libraryId>/feedback
request method: POST
Authorization header: "bearer <request owner's JWT>"
request body: {feedback: <user's feedback>}
outputs:
response body: {success: true, status: "Feedback Sent Successfully"}
response status code: 200


librarian gets feedback for his/her library:
inputs:
API endpoint: /libraries/<libraryId>/feedback
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
response body: {success: true, feedbacks: <array of all feedback>}
response status code: 200


librarian gets all blocked users from borrowing items:
inputs:
API endpoint: /libraries/<libraryId>/permissions/get?blockedFrom="borrowing"
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
if the request owner is a librarian:
response body: {success: true, blockedUsers: <array of all blocked users from borrowing items>}
response status code: 200
if the request owner is NOT a librarian:
response body should have the property "success" set to false and "status" set to "Access Denied"
response status code: 403


librarian gets all blocked users from reviewing items:
inputs:
API endpoint: /libraries/<libraryId>/permissions/get?blockedFrom="evaluating"
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
if the request owner is a librarian:
response body: {success: true, blockedUsers: <array of all blocked users from borrowing items>}
response status code: 200
if the request owner is NOT a librarian:
response body should have the property "success" set to false and "status" set to "Access Denied"
response status code: 403


librarian block/unblock the members of his/her library from borrowing items:
inputs:
API endpoint: /libraries/<libraryId>/permissions/<userId>/set?action=["block"|"unblock"]&from="borrowing"
request method: PUT
Authorization header: "bearer <request owner's JWT>"
outputs:
response body: {success: true, user: <the blocked user>}
response status code: 200


librarian block/unblock the members of his/her library from reviewing items:
inputs:
API endpoint: /libraries/<libraryId>/permissions/<userId>/set?action=["block"|"unblock"]&from="evaluating"
request method: PUT
Authorization header: "bearer <request owner's JWT>"
outputs:
response body: {success: true, user: <the blocked user>}
response status code: 200


librarian adds a new item to his/her library:
inputs:
API endpoint: /libraries/<libraryId>/items
request method: POST
Authorization header: "bearer <request owner's JWT>"
request body: {name: "itemTest", type: "magazine" , genre: "sci-fi", author: "eng", language:"ar", inLibrary: true, lateFees: 12, location:"s-5"}
outputs:
if the item is new:
response body: {success: true, status: "Item Added Successfully"}
response status code: 200
if the item already exists:
response body: {success: false, status: "Process Failed", err: "This Item Already Exists In This Library"}
response status code: 403
if the request owner is not a the librarian to the library:
response body should have the property "success" set to false and "status" set to "Access Denied"
response status code: 403


user gets all items in a certain library:
inputs:
API endpoint: /libraries/<libraryId>/items
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
response body: {success: true, num: <total number of items in the library>, items: <list of all items in the library>}
response status code: 200


user gets info about a certain item in a certain library:
inputs:
API endpoint: /libraries/<libraryId>/items/<itemId>
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
response body: {success: true, item: <info of the item>}
response status code: 200


librarian modifies the info of a certain item in his/her library:
inputs:
API endpoint: /libraries/<libraryId>/items/<itemId>
request method: PUT
Authorization header: "bearer <request owner's JWT>"
request body: {name: "test1mod", type: "magazine" , genre: "sci-fi", author: "eng", language:"en", inLibrary: true, lateFees: 12, location:"s-5"}
outputs:
if the request owner is the librarian:
response body: {success: true, status: "Item Modified Successfully", modifiedItem: <info of the item after update>}
response status code: 200
if the request owner is NOT the librarian:
response body should have the property "success" set to false and "status" set to "Access Denied"
response status code: 403



user reviews an item in a certain library:
inputs: 
API endpoint: /libraries/<libraryId>/items/<itemId>/reviews
request method: POST
Authorization header: "bearer <request owner's JWT>"
request body: {rating: <item rating>, review: <user's review>}
outputs:
response body: {success: true, status: "Review Posted Successfully"}
response status code: 200


librarian deletes a certain item in his/her library:
inputs:
API endpoint: /libraries/<libraryId>/items/<itemId>
request method: DELETE
Authorization header: "bearer <request owner's JWT>"
outputs:
if the request owner is the librarian:
response body: {success: true, status: "Item Deleted Successfully"}
response status code: 200
if the request owner is NOT the librarian:
response body should have property "success" set to false and "status" set to "Access Denied"
response status code: 403


librarian rejects incoming join requests to his/her library:
inputs:
API endpoint: /libraries/<libraryId>/<userId>?action="reject"
request method: PUT
Authorization header: "bearer <request owner's JWT>"
outputs: 
if the request owner is the librarian:
response body: {success: true, status: "User Rejected Successfuly"}
response status code: 200
if the request owner is NOT the librarian:
response body should have property "success" set to false and "status" set to "Access Denied"
response status code: 403


user sends a borrow request to borrow a physical item (book, magazine, audioMaterial) from a library he/she a member at:
inputs:
API endpoint: /borrowRequests/request/<libraryId>/<myItemId>
request method: POST
Authorization header: "bearer <request owner's JWT>"
outputs:
if the number of borrow requests + the borrowed items is 3 or less:
response body: {success: true, status: "Requested Successfully"}
response status code: 200
if the number of borrow requests + the borrowed items is more than 3:
response body: {success: false, status: "Request Failed", err: "Limit Reached"}
response status code: 403


user sends a borrow request to borrow a non-physical item (ebook, article) from a library he/she a member at:
inputs:
API endpoint: /borrowRequests/request/<libraryId>/<myItemId>
request method: POST
Authorization header: "bearer <request owner's JWT>"
outputs:
if the number of borrow requests + the borrowed items is 3 or less:
response body: {success: true, status: "Requested Successfully"}
response status code: 200
if the number of borrow requests + the borrowed items is more than 3:
response body: {success: false, status: "Request Failed", err: "Limit Reached"}
response status code: 403


librarian gets all borrow requests from his/her library:
inputs:
API endpoint: /borrowRequests/libraryRequests/<libraryId>
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
if the request owner is the librarian:
response body: {success: true, requests: <list of borrow requests>}
response status code: 200
if the request owner is NOT the librarian:
response body: {success: true, status: "Access Denied"}
response status code: 403


user gets all his pending borrow requests:
inputs:
API endpoint: /borrowRequests/myRequests
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
response body: {success: true, requests: <list of pending requests>}
response status code: 200


librarian accepts a borrow requests in his/her library:
inputs:
API endpoint: /borrowRequests/accept/<libraryId>/<borrowRequestId>}
request method: PUT
Authorization header: "bearer <request owner's JWT>"
outputs:
if the request owner is the librarian:
response body: {success: true, status: "Accepted Successfully"}
response status code: 200
if the request owner is NOT the librarian:
response body: {success: false, status: "Access Denied"}
response status code: 403


user gets all of his/her transactions:
inputs:
API endpoint: /transactions/myTransactions?requestedToReturn="null"
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
response body: {success: true, bRequests: <list of borrow requests>, transactions: <list of transactions>}
response status code: 200


user gets all of his/her returnings:
inputs:
API endpoint: /transactions/myTransactions?requestedToReturn=true
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
response body: {success: true, transactions: <list of transactions>}
response status code: 200


user gets info about a specific transaction:
inputs:
API endpoint: /transactions/transaction/<transactionId>
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
response body: {success: true, transaction: <info of the transaction>}
response status code: 200


user gets his/her borrowed items:
inputs:
API endpoint: /transactions/borrowed
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
response body: {success: true, borrowedItems: <list of borrowedItems>}
response status code: 200


admin gets all transactions in the system:
inputs:
API endpoint: /transactions/allTransactions
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
if the request owner is the librarian:
response body: {success: true, transactions: <list of transactions>}
response status code: 200
if the request owner is NOT the librarian:
response body: {success: false, status: "Access Denied"}
response status code: 403


user sends a return request to return an item:
inputs:
API endpoint: /transactions/requestToReturn/<transactionId>
request method: PUT
Authorization header: "bearer <request owner's JWT>"
outputs:
response body: {success: true, status: "Transaction Requested To Return"}
response status code: 200


librarian accepts a specific return request:
inputs:
API endpoint: /transactions/recive/<transactionId>
request method: PUT
Authorization header: "bearer <request owner's JWT>"
outputs:
if the request owner is the librarian:
response body: {success: true, status: "Transaction Returned"}
response status code: 200
if the request owner is NOT the librarian:
response body: {success: false, status: "Access Denied"}
response status code: 403


librarian gets all non-returned transactions:
inputs:
API endpoint: /transactions/allTransactions/nonReturned
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
if the request owner is the librarian:
response body: {success: true, transactions: <list of all transactions>}
response status code: 200
if the request owner is NOT the librarian:
response body: {success: false, status: "Access Denied"}
response status code: 403


librarian gets all requested to return transactions:
inputs:
API endpoint: /transactions/allTransactions/requestedToReturn
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
if the request owner is the librarian:
response body: {success: true, transactions: <list of all transactions>}
response status code: 200
if the request owner is NOT the librarian:
response body: {success: false, status: "Access Denied"}
response status code: 403


librarian gets all returnings:
inputs:
API endpoint: /transactions/admin/returned
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
if the request owner is the librarian:
response body: {success: true, transactions: <list of all transactions>}
response status code: 200
if the request owner is NOT the librarian:
response body: {success: false, status: "Access Denied"}
response status code: 403


user gets his fees:
inputs:
API endpoint: /fees/myFees
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
response body: {success: true, status: "Request Succeed", fees: <list of fees>}
response status code: 200


librarian gets all fees in the system:
inputs:
API endpoint: /fees/admin/fees
request method: GET
Authorization header: "bearer <request owner's JWT>"
outputs:
if the request owner is the librarian:
response body: {success: true, status: "Request Succeed", fees: <list of fees>}
response status code: 200
if the request owner is NOT the librarian:
response body: {success: false, status: "Access Denied"}
response status code: 403


user pays a certain fee:
inputs:
API endpoint: /fees/<feeId>
request method: PUT
Authorization header: "bearer <request owner's JWT>"
outputs:
response body: {success: true, status: "Paid Successfully", fee: <the paid fee>}
response status code: 200